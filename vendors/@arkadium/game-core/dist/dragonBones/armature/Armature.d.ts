import { BaseObject } from "../core/BaseObject";
import { IAnimatable } from "../animation/IAnimatable";
import { Slot } from "./Slot";
import { Bone } from "./Bone";
import { Constraint } from "./Constraint";
import { EventObject } from "../event/EventObject";
import { ArmatureData } from "../model/ArmatureData";
import { IArmatureProxy } from "./IArmatureProxy";
import { TextureAtlasData } from "../model/TextureAtlasData";
import { DragonBones } from "../core/DragonBones";
import { WorldClock } from "../animation/WorldClock";
import { Animation } from "../animation/Animation";
import { IEventDispatcher } from "../event/IEventDispatcher";
export declare class Armature extends BaseObject implements IAnimatable {
    static toString(): string;
    private static _onSortSlots;
    inheritAnimation: boolean;
    userData: any;
    _lockUpdate: boolean;
    private _slotsDirty;
    private _zOrderDirty;
    _zIndexDirty: boolean;
    _alphaDirty: boolean;
    private _flipX;
    private _flipY;
    _cacheFrameIndex: number;
    private _alpha;
    _globalAlpha: number;
    private readonly _bones;
    private readonly _slots;
    readonly _constraints: Array<Constraint>;
    private readonly _actions;
    _armatureData: ArmatureData;
    private _animation;
    private _proxy;
    private _display;
    _replaceTextureAtlasData: TextureAtlasData | null;
    private _replacedTexture;
    _dragonBones: DragonBones;
    private _clock;
    _parent: Slot | null;
    protected _onClear(): void;
    _sortZOrder(slotIndices: Array<number> | Int16Array | null, offset: number): void;
    _addBone(value: Bone): void;
    _addSlot(value: Slot): void;
    _addConstraint(value: Constraint): void;
    _bufferAction(action: EventObject, append: boolean): void;
    dispose(): void;
    init(armatureData: ArmatureData, proxy: IArmatureProxy, display: any, dragonBones: DragonBones): void;
    advanceTime(passedTime: number): void;
    invalidUpdate(boneName?: string | null, updateSlot?: boolean): void;
    containsPoint(x: number, y: number): Slot | null;
    intersectsSegment(xA: number, yA: number, xB: number, yB: number, intersectionPointA?: {
        x: number;
        y: number;
    } | null, intersectionPointB?: {
        x: number;
        y: number;
    } | null, normalRadians?: {
        x: number;
        y: number;
    } | null): Slot | null;
    getBone(name: string): Bone | null;
    getBoneByDisplay(display: any): Bone | null;
    getSlot(name: string): Slot | null;
    getSlotByDisplay(display: any): Slot | null;
    getBones(): Array<Bone>;
    getSlots(): Array<Slot>;
    get flipX(): boolean;
    set flipX(value: boolean);
    get flipY(): boolean;
    set flipY(value: boolean);
    get cacheFrameRate(): number;
    set cacheFrameRate(value: number);
    get name(): string;
    get armatureData(): ArmatureData;
    get animation(): Animation;
    get proxy(): IArmatureProxy;
    get eventDispatcher(): IEventDispatcher;
    get display(): any;
    get replacedTexture(): any;
    set replacedTexture(value: any);
    get clock(): WorldClock | null;
    set clock(value: WorldClock | null);
    get parent(): Slot | null;
    getDisplay(): any;
}
