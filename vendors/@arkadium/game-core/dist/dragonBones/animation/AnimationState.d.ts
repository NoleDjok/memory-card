import { BaseObject } from "../core/BaseObject";
import { AnimationBlendType } from "../core/DragonBones";
import { AnimationData, TimelineData } from "../model/AnimationData";
import { Armature } from "../armature/Armature";
import { ActionTimelineState } from "./TimelineState";
import { AnimationConfig } from "../model/AnimationConfig";
export declare class AnimationState extends BaseObject {
    static toString(): string;
    actionEnabled: boolean;
    additive: boolean;
    displayControl: boolean;
    resetToPose: boolean;
    blendType: AnimationBlendType;
    playTimes: number;
    layer: number;
    timeScale: number;
    parameterX: number;
    parameterY: number;
    positionX: number;
    positionY: number;
    autoFadeOutTime: number;
    fadeTotalTime: number;
    name: string;
    group: string;
    private _timelineDirty;
    _playheadState: number;
    _fadeState: number;
    _subFadeState: number;
    _position: number;
    _duration: number;
    private _weight;
    private _fadeTime;
    private _time;
    _fadeProgress: number;
    _weightResult: number;
    private readonly _boneMask;
    private readonly _boneTimelines;
    private readonly _boneBlendTimelines;
    private readonly _slotTimelines;
    private readonly _slotBlendTimelines;
    private readonly _constraintTimelines;
    private readonly _animationTimelines;
    private readonly _poseTimelines;
    private _animationData;
    private _armature;
    _actionTimeline: ActionTimelineState;
    private _zOrderTimeline;
    private _activeChildA;
    private _activeChildB;
    _parent: AnimationState | null;
    protected _onClear(): void;
    private _updateTimelines;
    private _updateBoneAndSlotTimelines;
    private _advanceFadeTime;
    init(armature: Armature, animationData: AnimationData, animationConfig: AnimationConfig): void;
    advanceTime(passedTime: number, cacheFrameRate: number): void;
    play(): void;
    stop(): void;
    fadeOut(fadeOutTime: number, pausePlayhead?: boolean): void;
    containsBoneMask(boneName: string): boolean;
    addBoneMask(boneName: string, recursive?: boolean): void;
    removeBoneMask(boneName: string, recursive?: boolean): void;
    removeAllBoneMask(): void;
    addState(animationState: AnimationState, timelineDatas?: TimelineData[] | null): void;
    activeTimeline(): void;
    get isFadeIn(): boolean;
    get isFadeOut(): boolean;
    get isFadeComplete(): boolean;
    get isPlaying(): boolean;
    get isCompleted(): boolean;
    get currentPlayTimes(): number;
    get totalTime(): number;
    get currentTime(): number;
    set currentTime(value: number);
    get weight(): number;
    set weight(value: number);
    get animationData(): AnimationData;
}
export declare class BlendState extends BaseObject {
    static readonly BONE_TRANSFORM: string;
    static readonly BONE_ALPHA: string;
    static readonly SURFACE: string;
    static readonly SLOT_DEFORM: string;
    static readonly SLOT_ALPHA: string;
    static readonly SLOT_Z_INDEX: string;
    static toString(): string;
    dirty: number;
    layer: number;
    leftWeight: number;
    layerWeight: number;
    blendWeight: number;
    target: BaseObject;
    protected _onClear(): void;
    update(animationState: AnimationState): boolean;
    reset(): void;
}
