import { SkinData } from "../model/SkinData";
import { ArmatureData, SlotData } from "../model/ArmatureData";
import { DragonBonesData } from "../model/DragonBonesData";
import { dbMap, DragonBones } from "../core/DragonBones";
import { WorldClock } from "../animation/WorldClock";
import { TextureAtlasData, TextureData } from "../model/TextureAtlasData";
import { Armature } from "../armature/Armature";
import { Slot } from "../armature/Slot";
import { ArmatureDisplayData, DisplayData } from "../model/DisplayData";
import { BinaryDataParser } from "../parser/BinaryDataParser";
import { ObjectDataParser } from "../parser/ObjectDataParser";
import { DataParser } from "../parser/DataParser";
export declare abstract class BaseFactory {
    protected static _objectParser: ObjectDataParser;
    protected static _binaryParser: BinaryDataParser;
    autoSearch: boolean;
    protected readonly _dragonBonesDataMap: dbMap<DragonBonesData>;
    protected readonly _textureAtlasDataMap: dbMap<Array<TextureAtlasData>>;
    protected _dragonBones: DragonBones;
    protected _dataParser: DataParser;
    constructor(dataParser?: DataParser | null);
    protected _isSupportMesh(): boolean;
    protected _getTextureData(textureAtlasName: string, textureName: string): TextureData | null;
    protected _fillBuildArmaturePackage(dataPackage: BuildArmaturePackage, dragonBonesName: string, armatureName: string, skinName: string, textureAtlasName: string): boolean;
    protected _buildBones(dataPackage: BuildArmaturePackage, armature: Armature): void;
    protected _buildSlots(dataPackage: BuildArmaturePackage, armature: Armature): void;
    protected _buildConstraints(dataPackage: BuildArmaturePackage, armature: Armature): void;
    protected _buildChildArmature(dataPackage: BuildArmaturePackage | null, _slot: Slot, displayData: ArmatureDisplayData): Armature | null;
    protected _getSlotDisplay(dataPackage: BuildArmaturePackage | null, displayData: DisplayData, slot: Slot): any;
    protected abstract _buildTextureAtlasData(textureAtlasData: TextureAtlasData | null, textureAtlas: any): TextureAtlasData;
    protected abstract _buildArmature(dataPackage: BuildArmaturePackage): Armature;
    protected abstract _buildSlot(dataPackage: BuildArmaturePackage, slotData: SlotData, armature: Armature): Slot;
    parseDragonBonesData(rawData: any, name?: string | null, scale?: number): DragonBonesData | null;
    parseTextureAtlasData(rawData: any, textureAtlas: any, name?: string | null, scale?: number): TextureAtlasData;
    updateTextureAtlases(textureAtlases: Array<any>, name: string): void;
    getDragonBonesData(name: string): DragonBonesData | null;
    addDragonBonesData(data: DragonBonesData, name?: string | null): void;
    removeDragonBonesData(name: string, disposeData?: boolean): void;
    getTextureAtlasData(name: string): Array<TextureAtlasData> | null;
    addTextureAtlasData(data: TextureAtlasData, name?: string | null): void;
    removeTextureAtlasData(name: string, disposeData?: boolean): void;
    getArmatureData(name: string, dragonBonesName?: string): ArmatureData | null;
    clear(disposeData?: boolean): void;
    buildArmature(armatureName: string, dragonBonesName?: string, skinName?: string, textureAtlasName?: string): Armature | null;
    replaceDisplay(slot: Slot, displayData: DisplayData | null, displayIndex?: number): void;
    replaceSlotDisplay(dragonBonesName: string, armatureName: string, slotName: string, displayName: string, slot: Slot, displayIndex?: number): boolean;
    replaceSlotDisplayList(dragonBonesName: string | null, armatureName: string, slotName: string, slot: Slot): boolean;
    replaceSkin(armature: Armature, skin: SkinData, isOverride?: boolean, exclude?: Array<string> | null): boolean;
    replaceAnimation(armature: Armature, armatureData: ArmatureData, isOverride?: boolean): boolean;
    getAllDragonBonesData(): dbMap<DragonBonesData>;
    getAllTextureAtlasData(): dbMap<Array<TextureAtlasData>>;
    get clock(): WorldClock;
    get dragonBones(): DragonBones;
}
export declare class BuildArmaturePackage {
    dataName: string;
    textureAtlasName: string;
    data: DragonBonesData;
    armature: ArmatureData;
    skin: SkinData | null;
}
